<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.oreum.posts.dao.PostsDAO">

  <!-- posts 테이블에 저장 -->
  <insert id="insertpost" parameterType="com.oreum.posts.dto.PostsDTO"
   useGeneratedKeys="true" keyProperty="postId">
    INSERT INTO posts (
      user_id, board_id, title, content, type
    ) VALUES (
      #{userId}, #{boardId}, #{title}, #{content}, #{type}
    )
  </insert>

  <!-- curation_details 테이블에 저장 -->
  <!-- <insert id="insertCurationDetail" 
          parameterType="com.oreum.posts.dto.PostsDTO"
          useGeneratedKeys="true"
          keyProperty = "curationId"
          >
    INSERT INTO curation_details (
      post_id, mountain_name, isUpward
    ) VALUES (
      #{postId}, #{mountainName}, #{isUpward}
    );
  </insert> -->
  
  <insert id="insertMeetingDetail" parameterType="com.oreum.posts.dto.PostsDTO">
    INSERT INTO meeting_details (
      post_id, meeting_date, meeting_location
    ) VALUES (
      #{postId}, #{meetingDate}, #{meetingLocation}
    );
  </insert>

  <!-- post_media 테이블에 URL 저장 -->
  <insert id="insertPostMedia">
    INSERT INTO post_media (post_id, media_type, media_url)
    VALUES (
      #{postId}, #{mediaType}, #{mediaUrl}
    )
  </insert>
<!-- 전체 게시글 가져오기 -->
<select id="getAllPosts" resultType="com.oreum.posts.dto.PostsDTO">
  SELECT 
    p.post_id AS postId,
    p.user_id AS userId,
    u.nickname,            -- 유저 테이블에서 닉네임 join
    p.board_id AS boardId,
    p.type,
    p.title,
    p.content,
    p.like_count AS likeCount,
    p.comment_count AS commentCount,
    p.is_deleted,
    p.created_at AS createdAt,
    p.updated_at AS updatedAt
  FROM posts p
  JOIN users u ON p.user_id = u.user_id
  ORDER BY p.created_at DESC
</select>


<!-- 검색관련 세부 [특정 서브 커뮤 내에서 검색] -->

<!-- 쿼리있는 경우 / 일반글(general)만 -->
<select id="searchGeneralPostsByBoardIdAndQuery" resultType="com.oreum.posts.dto.PostsDTO">
    SELECT *
    FROM posts
    WHERE 
        board_id = #{boardId} 
        AND (title LIKE CONCAT('%', #{query}, '%')
            OR IFNULL(content, '') LIKE CONCAT('%', #{query}, '%'))
        AND type = 'general'
    ORDER BY created_at DESC
</select>


<!-- 쿼리없는 경우 / 일반글(general)만 -->
<select id="getGeneralPostsByBoardId" resultType="com.oreum.posts.dto.PostsDTO">
    SELECT *
    FROM posts
    WHERE 
        board_id = #{boardId} 
        AND type = 'general'
    ORDER BY created_at DESC
</select>

<!-- 몽고디비에서 가져온 아이디로 추출 -->

<!-- MongoDB에서 description에 query가 포함된 세그먼트를 찾고 → 해당 postId만 MySQL에서 불러올 때 -->
<select id="getPostsByPostIds" resultType="com.oreum.posts.dto.PostsDTO">
    SELECT *
    FROM posts
    WHERE post_id IN
    <foreach collection="postIds" item="id" open="(" separator="," close=")">
        #{id}
    </foreach>
</select>

<!-- 검색 쿼리가 없을 때 큐레이션 게시글을 가져오기 -->
<select id="getCurationPostsByBoardId" resultType="com.oreum.posts.dto.PostsDTO">
    SELECT *
    FROM posts
    WHERE 
        board_id = #{boardId} 
        AND type = 'curation'
    ORDER BY created_at DESC

</select>




<!-- 미디어 관련 게시글 정보 가지고 오기 -->
<select id="getPostMedia" resultType="com.oreum.posts.dto.MediaDTO" parameterType="int">
  SELECT
    media_id AS mediaId,
    post_id AS postId,
    media_type AS mediaType,
    media_url AS mediaUrl,
    created_at AS createdAt
  FROM post_media
  WHERE post_id = #{postId}
  ORDER BY created_at ASC
</select>

<!-- 댓글 수 세기 -->
<select id="countComments" resultType="int" parameterType="int">
  SELECT COUNT(*) FROM comments WHERE post_id = #{postId}
</select>
<select id="getPostById" resultType="com.oreum.posts.dto.PostsDTO">
    SELECT 
    p.post_id AS postId,
    p.user_id AS userId,
    u.nickname AS nickname,
    p.board_id AS boardId,
    p.type,
    p.title,
    p.content,
    p.like_count AS likeCount,
    p.comment_count AS commentCount,
    p.is_deleted AS isDeleted,
    p.created_at AS createdAt,
    p.updated_at AS updatedAt
  FROM posts p
  JOIN users u ON p.user_id = u.user_id
  WHERE p.post_id = #{postId}
</select>
<select id="getCommentsByPostId" resultType="com.oreum.posts.dto.CommentDTO" parameterType="int">
  SELECT
    c.comment_id AS commentId,
    c.post_id AS postId,
    c.user_id AS userId,
    u.nickname AS nickname,
    c.parent_id AS parentId,
    c.content,
    c.like_count AS likeCount,
    c.created_at AS createdAt,
    c.updated_at AS updatedAt
  FROM comments c
  JOIN users u ON c.user_id = u.user_id
  WHERE c.post_id = #{postId}
  ORDER BY c.created_at ASC
</select>
<insert id="insertComment" parameterType="com.oreum.posts.dto.CommentDTO" useGeneratedKeys="true" keyProperty="commentId">
  INSERT INTO comments (
    post_id,
    user_id,
    parent_id,
    content,
    like_count,
    created_at
  ) VALUES (
    #{postId},
    #{userId},
    #{parentId},
    #{content},
    #{likeCount},
    #{createdAt}
  )
</insert>

<!-- 좋아요 여부 조회 -->
<select id="getPostLike" resultType="com.oreum.posts.dto.PostLikeDTO">
  SELECT
    like_id AS likeId,
    post_id AS postId,
    user_id AS userId,
    created_at AS createdAt
  FROM post_likes
  WHERE post_id = #{postId} AND user_id = #{userId}
</select>
<!-- 좋아요 등록 -->
<insert id="insertPostLike" parameterType="com.oreum.posts.dto.PostLikeDTO">
  INSERT INTO post_likes (post_id, user_id, created_at)
  VALUES (#{postId}, #{userId}, NOW())
</insert>
<!-- 좋아요 취소 -->
<delete id="deletePostLike">
  DELETE FROM post_likes WHERE post_id = #{postId} AND user_id = #{userId}
</delete>
<!-- 게시글 좋아요 수 증가 -->
<update id="incrementPostLikeCount">
  UPDATE posts SET like_count = like_count + 1 WHERE post_id = #{postId}
</update>
<!-- 게시글 좋아요 수 감소 -->
<update id="decrementPostLikeCount">
  UPDATE posts SET like_count = like_count - 1 WHERE post_id = #{postId}
</update>

<!-- 북마크 여부 확인 -->
<select id="getBookmark" resultType="com.oreum.posts.dto.BookmarkDTO">
  SELECT 
    bookmark_id AS bookmarkId,
    user_id AS userId,
    post_id AS postId,
    created_at AS createdAt
  FROM bookmarks
  WHERE post_id = #{postId} AND user_id = #{userId}
</select>
<!-- 북마크 추가 -->
<insert id="insertBookmark" parameterType="com.oreum.posts.dto.BookmarkDTO">
  INSERT INTO bookmarks (user_id, post_id, created_at)
  VALUES (#{userId}, #{postId}, NOW())
</insert>
<!-- 북마크 삭제 -->
<delete id="deleteBookmark">
  DELETE FROM bookmarks WHERE post_id = #{postId} AND user_id = #{userId}
</delete>
<!-- 유저가 북마크한 postId 리스트 반환 -->
<select id="getBookmarkedPostIdsByUser" resultType="int">
  SELECT post_id FROM bookmarks WHERE user_id = #{userId}
</select>
<!-- 내가 쓴 글 가져오기 -->
<select id="getPostsByUserId" resultType="com.oreum.posts.dto.PostsDTO" parameterType="int">
  SELECT 
    p.post_id AS postId,
    p.user_id AS userId,
    u.nickname,
    p.board_id AS boardId,
    p.type,
    p.title,
    p.content,
    p.like_count AS likeCount,
    p.comment_count AS commentCount,
    p.is_deleted AS isDeleted,
    p.created_at AS createdAt,
    p.updated_at AS updatedAt
  FROM posts p
  JOIN users u ON p.user_id = u.user_id
  WHERE p.user_id = #{userId}
  ORDER BY p.created_at DESC
</select>

<!-- 내가 쓴 덧글 가져오기 -->
<select id="getCommentsByUserId" resultType="com.oreum.posts.dto.CommentDTO" parameterType="int">
  SELECT
    c.comment_id AS commentId,
    c.post_id AS postId,
    c.user_id AS userId,
    u.nickname AS nickname,
    c.parent_id AS parentId,
    c.content,
    c.like_count AS likeCount,
    c.created_at AS createdAt,
    c.updated_at AS updatedAt
  FROM comments c
  JOIN users u ON c.user_id = u.user_id
  WHERE c.user_id = #{userId}
  ORDER BY c.created_at DESC
</select>

<!-- 좋아요한 게시물 ID 가져오기 -->
<select id="getLikedPostIdsByUser" resultType="int" parameterType="int">
  SELECT post_id FROM post_likes WHERE user_id = #{userId}
</select>
<select id="getbookmarkIdsByUser" resultType="int" parameterType="int">
SELECT post_id FROM bookmarks WHERE user_id = #{userId}
</select>
<!-- 특정 커뮤니티(boardId)의 게시글 가져오기 -->
<select id="getPostsByBoardId" resultType="com.oreum.posts.dto.PostsDTO" parameterType="int">
  SELECT 
    p.post_id AS postId,
    p.user_id AS userId,
    u.nickname,
    p.board_id AS boardId,
    p.type,
    p.title,
    p.content,
    p.like_count AS likeCount,
    p.comment_count AS commentCount,
    p.is_deleted AS isDeleted,
    p.created_at AS createdAt,
    p.updated_at AS updatedAt
  FROM posts p
  JOIN users u ON p.user_id = u.user_id
  WHERE p.board_id = #{boardId}
  ORDER BY p.created_at DESC
</select>
<update id="updatePost" parameterType="com.oreum.posts.dto.PostsDTO">
    UPDATE posts
    SET title = #{title},
        content = #{content},
        updated_at = NOW()
    WHERE post_id = #{postId}
</update>
<delete id="deletePost">
  DELETE FROM posts WHERE post_id = #{postId}
</delete>
<select id="getNicknameByUserId" resultType="string">
    SELECT nickname FROM users WHERE user_id = #{userId}
</select>
<!-- 댓글 수정 -->
<update id="updateComment" parameterType="com.oreum.posts.dto.CommentDTO">
  UPDATE comments
  SET content = #{content},
      updated_at = #{updatedAt}
  WHERE comment_id = #{commentId}
</update>

<!-- 댓글 삭제 -->
<delete id="deleteComment" parameterType="int">
  DELETE FROM comments WHERE comment_id = #{commentId}
</delete>


<select id="getPostsByCommunityId" parameterType="int" resultType="com.oreum.posts.dto.PostsDTO">
        SELECT
            p.post_id AS postId,
            p.board_id AS boardId,
            p.category_id AS categoryId,
            p.creator_id AS creatorId,
            u.nickname AS creatorNickname,
            p.title,
            p.content,
            p.views,
            p.likes AS postLikes,
            p.location,
            p.latitude,
            p.longitude,
            p.created_at AS createdAt,
            p.updated_at AS updatedAt,
            p.post_type AS postType,
            p.parent_post_id AS parentPostId,
            p.start_date AS startDate,
            p.end_date AS endDate,
            p.max_participants AS maxParticipants,
            p.current_participants AS currentParticipants,
            p.meeting_time AS meetingTime
        FROM posts p
        JOIN users u ON p.creator_id = u.user_id
        WHERE p.board_id = #{communityId}
        ORDER BY p.created_at DESC
    </select>


  </mapper>