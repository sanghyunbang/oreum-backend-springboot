<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.oreum.auth.mapper.UserDao">

    <!-- 사용자 조회 by 이메일 -->
    <select id="findByEmail" parameterType="string" resultType="com.oreum.auth.dto.UserRecordDTO">
        SELECT
        user_id AS userId,
        email,
        password_hash AS passwordHash,
        name,
        nickname,
        profile_image AS profileImage,
        address,
        points,
        role,
        status,
        last_login AS lastLogin,
        created_at AS createdAt
    FROM users
    WHERE email = #{email}
    </select>

    <!-- 사용자 삽입 -->
<insert id="insertUser" parameterType="com.oreum.auth.dto.UserRecordDTO" useGeneratedKeys="true" keyProperty="userId">
    INSERT INTO users (
        email,
        password_hash,
        name,         
        nickname,
        profile_image,
        address,
        points,
        role,
        status,
        last_login,
        created_at
    ) VALUES (
        #{email},
        #{passwordHash},
        #{name},       
        #{nickname},
        #{profileImage},
        #{address},
        #{points},
        #{role},
        #{status},
        #{lastLogin},
        #{createdAt}
    )
</insert>


    <!-- 로그인 시 마지막 접속시간 업데이트 등 -->
    <update id="updateLoginInfo" parameterType="com.oreum.auth.dto.UserRecordDTO">
        UPDATE users
        SET
            last_login = #{lastLogin}
        WHERE email = #{email}
    </update>
    
    <select id="selectUserIdByEmail" parameterType="string" resultType="Integer">
        SELECT user_id
        FROM users
        WHERE email = #{email}
    </select>

    <!-- 유저 닉네임 가져오기 -->
    <select id="userNameByuserId" parameterType="Integer" resultType="string">
        SELECT nickname
        FROM users
        WHERE user_id = #{userId}
    </select>
    <!-- userId로 전체 사용자 정보 가져오기 -->
<select id="findByUserId" parameterType="int" resultType="com.oreum.auth.dto.UserRecordDTO">
    SELECT
        user_id AS userId,
        email,
        password_hash AS passwordHash,
        name,
        nickname,
        profile_image AS profileImage,
        address,
        points,
        role,
        status,
        last_login AS lastLogin,
        created_at AS createdAt
    FROM users
    WHERE user_id = #{userId}
</select>
<update id="updateUserDetails" parameterType="com.oreum.auth.dto.UserRecordDTO">
    UPDATE users
    SET
        name = #{name},
        nickname = #{nickname},
        profile_image = #{profileImage},
        address = #{address},
        points = #{points}
    WHERE user_id = #{userId}
</update>
<delete id="deleteUserById" parameterType="int">
    DELETE FROM users WHERE user_id = #{userId}
</delete>

    

</mapper>
